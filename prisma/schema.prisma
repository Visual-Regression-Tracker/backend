generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Build {
  id         String    @id @default(uuid())
  ciBuildId  String?
  number     Int?
  branchName String?
  status     String?
  projectId  String
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  userId     String?
  isRunning  Boolean?
  project    Project   @relation(fields: [projectId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
  testRuns   TestRun[]

  @@unique([projectId, ciBuildId])
}

model Project {
  id                    String          @id @default(uuid())
  name                  String          @unique
  mainBranchName        String          @default("master")
  buildsCounter         Int             @default(0)
  maxBuildAllowed       Int             @default(100)
  maxBranchLifetime     Int             @default(30)
  updatedAt             DateTime        @updatedAt
  createdAt             DateTime        @default(now())
  autoApproveFeature    Boolean         @default(true)
  imageComparison       ImageComparison @default(pixelmatch)
  imageComparisonConfig String          @default("{ \"threshold\": 0.1, \"ignoreAntialiasing\": true, \"allowDiffDimensions\": false }")
  builds                Build[]
  TestRun               TestRun[]
  testVariations        TestVariation[]
}

model TestRun {
  id                    String         @id @default(uuid())
  imageName             String
  diffName              String?
  diffPercent           Float?
  diffTollerancePercent Float          @default(0)
  pixelMisMatchCount    Int?
  status                TestStatus
  buildId               String
  testVariationId       String?
  projectId             String?
  merge                 Boolean        @default(false)
  updatedAt             DateTime       @updatedAt
  createdAt             DateTime       @default(now())
  name                  String         @default("")
  browser               String?
  device                String?
  os                    String?
  viewport              String?
  customTags            String?        @default("")
  baselineName          String?
  comment               String?
  branchName            String         @default("master")
  baselineBranchName    String?
  ignoreAreas           String         @default("[]")
  tempIgnoreAreas       String         @default("[]")
  baseline              Baseline?
  build                 Build          @relation(fields: [buildId], references: [id])
  project               Project?       @relation(fields: [projectId], references: [id])
  testVariation         TestVariation? @relation(fields: [testVariationId], references: [id])
}

model TestVariation {
  id           String     @id @default(uuid())
  name         String
  branchName   String     @default("master")
  browser      String     @default("")
  device       String     @default("")
  os           String     @default("")
  viewport     String     @default("")
  customTags   String     @default("")
  baselineName String?
  ignoreAreas  String     @default("[]")
  projectId    String
  comment      String?
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  baselines    Baseline[]
  testRuns     TestRun[]
  project      Project    @relation(fields: [projectId], references: [id])

  @@unique([projectId, name, browser, device, os, viewport, customTags, branchName])
}

model Baseline {
  id              String        @id @default(uuid())
  baselineName    String
  testVariationId String
  testRunId       String?       @unique
  userId          String?
  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
  testRun         TestRun?      @relation(fields: [testRunId], references: [id])
  testVariation   TestVariation @relation(fields: [testVariationId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  firstName String?
  lastName  String?
  apiKey    String     @unique
  isActive  Boolean    @default(true)
  role      Role       @default(guest)
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  baselines Baseline[]
  builds    Build[]
}

enum TestStatus {
  failed
  new
  ok
  unresolved
  approved
  autoApproved
}

enum ImageComparison {
  pixelmatch
  lookSame
  odiff
}

enum Role {
  admin
  editor
  guest
}
